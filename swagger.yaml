openapi: 3.0.3
info:
  title: Superbooking API
  description: |-
    Контекст для этого ДЗ взят из первого домашнего задания, это интеграция нашей системы с с сервисом борнирования гостиниц. Соответственно этот сервис бронирования гостиниц предоставляет свое API, часть эндпоинтов которого находится в этом документе.  
    (Текст описания системы из первого ДЗ: 
    Группа туристов от 2 до 100 человек должна собраться и уехать в отпуск. Программным решением должны охватываться задачи с момента появления идеи об отпуске до момента посадки в самолет/поезд/автобус и т.д.
    Есть ряд задач, которые должен выполнить каждый из участников: подготовить документы (сделать страховку, проверить срок действия паспорта, получить визу), согласовать и получить отпуск, собрать чемодан.
    Есть задачи, исполнение которых делегируется одному из участников поездки: забронировать билеты, гостиницу (место проживания), распланировать и согласовать список развлечений.
    Есть персональные, скрытые от иных участников задачи.)  
    Для это ДЗ было составлено 17 методов к 9 эндпоинтам, первый POST (/booking) описан полностью.
  termsOfService: https://www.superbooking.com/terms-of-service
  contact:
    email: administrator@superbooking.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11 build 2024-03-09
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://api.superbooking.com/booking-engine/1.0
tags:
  - name: Booking
    description: Доступ к бронированиям и возможные операции
  - name: Hotel
    description: Доступ к отелям и возможные операции
paths:
  /booking:
    post:
      tags:
        - Booking
      summary: Создает новое бронирование
      description: Создает новое бронирование
      operationId: createBooking
      requestBody:
        description: Создает новое бронирование
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'    
        '400':
          description: Bad request, check error list for specific errors that occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadrequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPaymentRequired'
      security:
        - petstore_auth: []
        - api_key: []
    get:
      tags:
        - Booking
      summary: Находит все существующие бронирования и возвращает их в виде списка, для фильтрации бронирований применяются query параметры
      description: Находит все существующие бронирования и возвращает их в виде списка
      operationId: getBookings
      parameters:
        - name: hotel_id
          in: query
          description: ID отеля
          required: false
          schema:
            type: integer
            format: int64
        - name: customer_firstname
          in: query
          description: Имя клиента
          required: false
          schema:
            type: integer
            format: int64
        - name: customer_lastname
          in: query
          description: Фамилия клиента
          required: false
          schema:
            type: integer
            format: int64
        - name: checkin
          in: query
          description: Сheckin дата
          required: false
          schema:
           type: string
           format: date
        - name: checkout
          in: query
          description: Сheckout дата
          required: false
          schema:
           type: string
           format: date
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
      security:
        - petstore_auth: []
        - api_key: []

  /booking/{booking_id}:
    get:
      tags:
        - Booking
      summary: Находит существующее бронирование
      description: Находит существующее бронирование по id
      operationId: getBooking
      parameters:
        - name: booking_id
          in: path
          description: ID бронирования
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
      security:
        - petstore_auth: []
        - api_key: []
    put:
      tags:
        - Booking
      summary: Обновляет существующее бронирование
      description: Обновляет существующее бронирование по id
      operationId: editBooking
      parameters:
        - name: booking_id
          in: path
          description: ID бронирования
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Обновляет существующее бронирование по id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
      security:
        - petstore_auth: []
        - api_key: []
    patch:
      tags:
        - Booking
      summary: Частично обновляет существующее бронирование
      description: Частично обновляет существующее бронирование по id
      operationId: PartialEditBooking
      parameters:
        - name: booking_id
          in: path
          description: ID бронирования
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Частично обновляет существующее бронирование по id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
      security:
        - petstore_auth: []
        - api_key: []
    delete:
      tags:
        - Booking
      summary: Отменяет/удаляет существующее бронирование
      description: Удаляет существующее бронирование по id
      operationId: deleteBooking
      parameters:
        - name: booking_id
          in: path
          description: ID бронирования
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
      security:
        - petstore_auth: []
        - api_key: []

  /hotel:
    get:
      tags:
        - Hotel
      summary: Находит все существующие отели и возвращает их в виде списка, для фильтрации отелей применяются query параметры
      description: Находит все существующие отели и возвращает их в виде списка
      operationId: tbd
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'        
      security:
        - petstore_auth: []
        - api_key: []
        
  /hotel/{hotel_id}:
    get:
      tags:
        - Hotel
      summary: Находит существующий отель
      description: Находит существующий отель по его id
      operationId: tbd1
      parameters:
        - name: hotel_id
          in: path
          description: ID бронирования
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
                
  /hotel/{hotel_id}/unit/{unit_id}:
    get:
      tags:
        - Hotel
      summary: Находит информацию о номере в существующем отеле
      description: Находит информацию о номере в существующем отеле по id отеля и id номера
      operationId: tbd2
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: unit_id
          in: path
          description: ID номера
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'     
                
  /hotel/{hotel_id}/unit/{unit_id}/aviability:                
    get:
      tags:
        - Hotel
      summary: Выводит информацию о доступности номера на нужные даты
      description: Выводит информацию о доступности номера на нужные даты в существующем отеле по id отеля, id номера, дате заезда, дате выезда и количестве гостей
      operationId: tbd3
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: unit_id
          in: path
          description: ID номера
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  
                
  /hotel/{hotel_id}/unit/{unit_id}/price:  
    get:
      tags:
        - Hotel
      summary: Выводит информацию о стоимости номера на нужные даты
      description: Выводит информацию о стоимости номера на нужные даты в существующем отеле по id отеля, id номера, дате заезда, дате выезда и количестве гостей
      operationId: tbd4
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: unit_id
          in: path
          description: ID номера
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  
                
  /hotel/{hotel_id}/review:  
    get:
      tags:
        - Hotel
      summary: Находит все существующие отзывы об отеле и возвращает их в виде списка, для фильтрации отзывов применяются query параметры
      description: Находит все существующие отзывы об отеле и возвращает их в виде списка, для фильтрации отзывов применяются query параметры
      operationId: tbd5
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  

    post:
      tags:
        - Hotel
      summary: Создает новый отзыв об отеле
      description: Создает новый отзыв об отеле по его id
      operationId: tbd6
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Создает новый отзыв об отеле по его id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'          
      security:
        - petstore_auth: []
        - api_key: []

  /hotel/{hotel_id}/review/{review_id}:  
    get:
      tags:
        - Hotel
      summary: Находит существующий отзыв об отеле 
      description: Находит существующий отзыв об отеле по id отеля и id отзыва
      operationId: tbd7
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: review_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  

    put:
      tags:
        - Hotel
      summary: Обновляет существующий отзыв об отеле 
      description: Обновляет существующий отзыв об отеле по id отеля и id отзыва
      operationId: tbd8
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: review_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Обновляет существующий отзыв об отеле по id отеля и id отзыва
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  

    patch:
      tags:
        - Hotel
      summary: Частично обновляет существующий отзыв об отеле 
      description: Частично обновляет существующий отзыв об отеле по id отеля и id отзыва
      operationId: tbd9
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: review_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Частично обновляет существующий отзыв об отеле по id отеля и id отзыва
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  

    delete:
      tags:
        - Hotel
      summary: Удаляет существующий отзыв об отеле 
      description: Удаляет существующий отзыв об отеле по id отеля и id отзыва
      operationId: tbd10
      parameters:
        - name: hotel_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
        - name: review_id
          in: path
          description: ID отеля
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'  

components:
  schemas:
  
    Booking:
      required:
        - depositpaid
        - customerfirstname
        - customerlastname
        - hotelid
        - roomid
        - adults
        - children
        - totalprice
        - email
        - phone
        - bookingdates
      type: object
      properties:
        hotelid:
          minimum: 1
          maximum: 9999999999
          type: integer
          format: int32
          example: 1
        roomid:
          minimum: 1
          maximum: 9999999999
          type: integer
          format: int32
          example: 1
        adults:
          minimum: 1
          maximum: 9999999999
          type: integer
          format: int32
          example: 1
        children:
          minimum: 0
          maximum: 9999999999
          type: integer
          format: int32
          example: 0
        customerfirstname:
          maxLength: 30
          minLength: 2
          type: string
          example:  Anton
        customerlastname:
          maxLength: 30
          minLength: 2
          type: string
          example:  Chegur
        totalprice:
          minimum: 1
          maximum: 3.4E+38
          type: integer
          format: float32
          example:  100.50
        depositpaid:
          type: boolean
        email:
          type: string
          maxLength: 254
          minLength: 5
          example:  anton.chegur@example.com
        phone:
          type: string
          maxLength: 13
          minLength: 9
          example: "+385987654321"
        bookingdates:
          $ref: '#/components/schemas/BookingDates'
        note:
          type: string
          maxLength: 1000
          minLength: 0
          example:  Guest asked for parking

    BookingDates:
      required:
        - checkin
        - checkout
      type: object
      properties:
        checkin:
          type: string
          format: date
          example: 2024-09-13
        checkout:
          type: string
          format: date
          example: 2024-09-14

    BookingResponse:
      required:
        - bookingid
        - booking
      type: object
      properties:
        bookingid:
          minimum: 1
          type: integer
          format: int32
        booking:
          $ref: '#/components/schemas/Booking'

    ToDo:
      type: object
      properties:
        info:
          type: string
          example: "// TODO: Will be added soon."

    ErrorBadrequest:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: Bad Request, check error list for specific errors that occured
        errorMessage:
          type: string
        fieldErrors:
          type: array
          items:
            type: string
            
    ErrorUnauthorized:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: Unauthorized
        errorMessage:
          type: string
          example: Authorization information is missing or invalid
        fieldErrors:
          type: array
          items:
            type: string
            
    ErrorPaymentRequired:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          example: 402
        error:
          type: string
          example: Payment Required
        errorMessage:
          type: string
          example: Your payment has been denied or insufficient funds were available
        fieldErrors:
          type: array
          items:
            type: string

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes: {}
            
    api_key:
      type: apiKey
      name: api_key
      in: header